/* 
    7、函数
    定义：根据不同的参数生成不同的样式；
    注意：函数如果没有参数，在转译成 css 时就不会被打印出来，详见上面混合中的示例；
*/

// 例1：定义函数
.border-radius(@radius) {
  -webkit-border-radius: @radius;
     -moz-border-radius: @radius;
          border-radius: @radius;
}
div1 {
  .border-radius(4px);
}
div2 {
  .border-radius(6px);
}

// 上面less样式将编译成如下css

div1 {
  -webkit-border-radius: 4px;
  -moz-border-radius: 4px;
  border-radius: 4px;
}
div2 {
  -webkit-border-radius: 6px;
  -moz-border-radius: 6px;
  border-radius: 6px;
}



// 例2：函数参数默认值
.border-radius(@radius: 3px) {
  -webkit-border-radius: @radius;
  -moz-border-radius: @radius;
  border-radius: @radius;
}



// 例3：函数有多个参数时用分号隔开
.mixin(@color; @padding:2) {
  color-2: @color;
  padding-2: @padding;
}



// 例4：函数参数如果有默认，调用时就是通过变量名称，而不是位置
.mixin(@color: black; @margin: 10px; @padding: 20px) {
  color: @color;
  margin: @margin;
  padding: @padding;
}
.class1 {       
  .mixin(@margin: 20px; @color: #33acfe);   // 调用
}


// 例5：函数参数有个内置变量 @arguments，相当于 js 中的 arguments
.box-shadow(@x: 0; @y: 0; @blur: 1px; @color: #000) {
  -webkit-box-shadow: @arguments;
     -moz-box-shadow: @arguments;
          box-shadow: @arguments;
}


// 例6：函数名允许相同，但参数不同，类似于 java 中多态的概念
// 函数1
.mixin(@color: black) {  
    background: @color;
}   
// 同名函数2
.mixin(@color: black; @margin: 10px) {
    color: @color;
    margin: @margin;
}


// 例7：less自带了许多内置函数
// 传送门：https://less.bootcss.com/functions/


